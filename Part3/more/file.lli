@.strP = private unnamed_addr constant [4 x i8] c"%d\0A\00", align 1
define void @println(i32 %x) {
%1 = alloca i32, align 4
store i32 %x, i32* %1, align 4
%2 = load i32, i32* %1, align 4
%3 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.strP, i32 0, i32 0), i32 %2)
ret void
}
declare i32 @printf(i8*, ...)

@.strR = private unnamed_addr constant [3 x i8] c"%d\00", align 1
define i32 @readInt() {
%x = alloca i32, align 4
%1 = call i32 (i8*, ...) @__isoc99_scanf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.strR, i32 0, i32 0), i32* %x)
%2 = load i32, i32* %x, align 4
ret i32 %2
}
declare i32 @__isoc99_scanf(i8*, ...)
define i32 @main() {
entry:
%0 = add i32 1,0
%x = alloca i32
store i32 %0, i32* %x
%1 = add i32 2,0
%y = alloca i32
store i32 %1, i32* %y
%2 = add i32 2,0
%u = alloca i32
store i32 %2, i32* %u
%3 = load i32, i32* %x
%4 = add i32 %3,0
%5 = add i32 2,0
%6 = icmp ne i32 %4,%5
br i1 %6, label %label0, label %afterIf0
label0:
%7 = add i32 5,0
store i32 %7, i32* %x
%8= load i32, i32*%x
call void @println(i32 %8)
%a = alloca i32
%9 = call i32 @readInt()
store i32 %9, i32* %a
%10= load i32, i32*%a
call void @println(i32 %10)
br label %afterIf0
afterIf0:
ret i32 0
}
