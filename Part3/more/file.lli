@.strP = private unnamed_addr constant [4 x i8] c"%d\0A\00", align 1
define void @println(i32 %x) {
%1 = alloca i32, align 4
store i32 %x, i32* %1, align 4
%2 = load i32, i32* %1, align 4
%3 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.strP, i32 0, i32 0), i32 %2)
ret void
}
declare i32 @printf(i8*, ...)

@.strR = private unnamed_addr constant [3 x i8] c"%d\00", align 1
define i32 @readInt() {
%x = alloca i32, align 4
%1 = call i32 (i8*, ...) @__isoc99_scanf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.strR, i32 0, i32 0), i32* %x)
%2 = load i32, i32* %x, align 4
ret i32 %2
}
declare i32 @__isoc99_scanf(i8*, ...)
define i32 @main() {
entry:
%a = alloca i32
%0 = call i32 @readInt()
store i32 %0, i32* %a
%1 = add i32 0,0
%i = alloca i32
store i32 %1, i32* %i
br label %label0
label0:
%2 = load i32, i32* %a
%3 = add i32 %2,0
%4 = add i32 10,0
%5 = icmp slt i32 %3,%4
br i1 %5, label %label1, label %afterIf0
label1:
%6 = load i32, i32* %i
%7 = add i32 %6,0
%8 = add i32 0,0
%9 = icmp eq i32 %7,%8
br i1 %9, label %label2, label %afterIf1
label2:
%10 = add i32 1,0
store i32 %10, i32* %i
br label %afterIf2
afterIf1:
%11= load i32, i32*%a
call void @println(i32 %11)
%12 = add i32 0,0
store i32 %12, i32* %i
br label %afterIf2
afterIf2:
%13 = load i32, i32* %a
%14 = add i32 %13,1
store i32 %14, i32* %a
br label %label0
afterIf0:
ret i32 0
}
